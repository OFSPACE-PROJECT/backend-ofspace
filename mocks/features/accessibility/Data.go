// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"
	accessibility "ofspace-be/features/accessibility"

	mock "github.com/stretchr/testify/mock"
)

// Data is an autogenerated mock type for the Data type
type Data struct {
	mock.Mock
}

// CreateAccessibility provides a mock function with given fields: ctx, _a1
func (_m *Data) CreateAccessibility(ctx context.Context, _a1 accessibility.Core) (accessibility.Core, error) {
	ret := _m.Called(ctx, _a1)

	var r0 accessibility.Core
	if rf, ok := ret.Get(0).(func(context.Context, accessibility.Core) accessibility.Core); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(accessibility.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, accessibility.Core) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccessibility provides a mock function with given fields: ctx, id
func (_m *Data) GetAccessibility(ctx context.Context, id uint) (accessibility.Core, error) {
	ret := _m.Called(ctx, id)

	var r0 accessibility.Core
	if rf, ok := ret.Get(0).(func(context.Context, uint) accessibility.Core); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(accessibility.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestAccessibility provides a mock function with given fields: ctx, id, name
func (_m *Data) RequestAccessibility(ctx context.Context, id uint, name string) (accessibility.Core, error) {
	ret := _m.Called(ctx, id, name)

	var r0 accessibility.Core
	if rf, ok := ret.Get(0).(func(context.Context, uint, string) accessibility.Core); ok {
		r0 = rf(ctx, id, name)
	} else {
		r0 = ret.Get(0).(accessibility.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint, string) error); ok {
		r1 = rf(ctx, id, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchAccessibility provides a mock function with given fields: ctx, name
func (_m *Data) SearchAccessibility(ctx context.Context, name string) ([]accessibility.Core, error) {
	ret := _m.Called(ctx, name)

	var r0 []accessibility.Core
	if rf, ok := ret.Get(0).(func(context.Context, string) []accessibility.Core); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]accessibility.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchAccessibilityByAddress provides a mock function with given fields: ctx, address
func (_m *Data) SearchAccessibilityByAddress(ctx context.Context, address string) ([]accessibility.Core, error) {
	ret := _m.Called(ctx, address)

	var r0 []accessibility.Core
	if rf, ok := ret.Get(0).(func(context.Context, string) []accessibility.Core); ok {
		r0 = rf(ctx, address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]accessibility.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAccessibility provides a mock function with given fields: ctx, _a1
func (_m *Data) UpdateAccessibility(ctx context.Context, _a1 accessibility.Core) (accessibility.Core, error) {
	ret := _m.Called(ctx, _a1)

	var r0 accessibility.Core
	if rf, ok := ret.Get(0).(func(context.Context, accessibility.Core) accessibility.Core); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(accessibility.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, accessibility.Core) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
