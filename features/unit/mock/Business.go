// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"
	unit "ofspace-be/features/unit"

	mock "github.com/stretchr/testify/mock"
)

// Business is an autogenerated mock type for the Business type
type Business struct {
	mock.Mock
}

// AddFacilityToUnit provides a mock function with given fields: c, unitId, facilityId
func (_m *Business) AddFacilityToUnit(c context.Context, unitId uint, facilityId uint) (unit.Facility, error) {
	ret := _m.Called(c, unitId, facilityId)

	var r0 unit.Facility
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint) unit.Facility); ok {
		r0 = rf(c, unitId, facilityId)
	} else {
		r0 = ret.Get(0).(unit.Facility)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint, uint) error); ok {
		r1 = rf(c, unitId, facilityId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInteriorPhoto provides a mock function with given fields: ctx, photo
func (_m *Business) CreateInteriorPhoto(ctx context.Context, photo unit.InteriorCore) (unit.InteriorCore, error) {
	ret := _m.Called(ctx, photo)

	var r0 unit.InteriorCore
	if rf, ok := ret.Get(0).(func(context.Context, unit.InteriorCore) unit.InteriorCore); ok {
		r0 = rf(ctx, photo)
	} else {
		r0 = ret.Get(0).(unit.InteriorCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, unit.InteriorCore) error); ok {
		r1 = rf(ctx, photo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUnit provides a mock function with given fields: ctx, _a1
func (_m *Business) CreateUnit(ctx context.Context, _a1 unit.Core) (unit.Core, error) {
	ret := _m.Called(ctx, _a1)

	var r0 unit.Core
	if rf, ok := ret.Get(0).(func(context.Context, unit.Core) unit.Core); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(unit.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, unit.Core) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteInteriorPhoto provides a mock function with given fields: ctx, UnitId, photoId
func (_m *Business) DeleteInteriorPhoto(ctx context.Context, UnitId uint, photoId uint) (unit.InteriorCore, error) {
	ret := _m.Called(ctx, UnitId, photoId)

	var r0 unit.InteriorCore
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint) unit.InteriorCore); ok {
		r0 = rf(ctx, UnitId, photoId)
	} else {
		r0 = ret.Get(0).(unit.InteriorCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint, uint) error); ok {
		r1 = rf(ctx, UnitId, photoId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUnitFacility provides a mock function with given fields: ctx, unitId, facilityId
func (_m *Business) DeleteUnitFacility(ctx context.Context, unitId uint, facilityId uint) (unit.Core, error) {
	ret := _m.Called(ctx, unitId, facilityId)

	var r0 unit.Core
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint) unit.Core); ok {
		r0 = rf(ctx, unitId, facilityId)
	} else {
		r0 = ret.Get(0).(unit.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint, uint) error); ok {
		r1 = rf(ctx, unitId, facilityId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllInteriorPhoto provides a mock function with given fields: ctx, UnitId
func (_m *Business) GetAllInteriorPhoto(ctx context.Context, UnitId uint) ([]unit.InteriorCore, error) {
	ret := _m.Called(ctx, UnitId)

	var r0 []unit.InteriorCore
	if rf, ok := ret.Get(0).(func(context.Context, uint) []unit.InteriorCore); ok {
		r0 = rf(ctx, UnitId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]unit.InteriorCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, UnitId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllUnit provides a mock function with given fields: ctx, buildingId
func (_m *Business) GetAllUnit(ctx context.Context, buildingId uint) ([]unit.Core, error) {
	ret := _m.Called(ctx, buildingId)

	var r0 []unit.Core
	if rf, ok := ret.Get(0).(func(context.Context, uint) []unit.Core); ok {
		r0 = rf(ctx, buildingId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]unit.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, buildingId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllUnitFacility provides a mock function with given fields: c, unitId
func (_m *Business) GetAllUnitFacility(c context.Context, unitId uint) (unit.Core, error) {
	ret := _m.Called(c, unitId)

	var r0 unit.Core
	if rf, ok := ret.Get(0).(func(context.Context, uint) unit.Core); ok {
		r0 = rf(c, unitId)
	} else {
		r0 = ret.Get(0).(unit.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(c, unitId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInteriorPhoto provides a mock function with given fields: ctx, UnitId, photoId
func (_m *Business) GetInteriorPhoto(ctx context.Context, UnitId uint, photoId uint) (unit.InteriorCore, error) {
	ret := _m.Called(ctx, UnitId, photoId)

	var r0 unit.InteriorCore
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint) unit.InteriorCore); ok {
		r0 = rf(ctx, UnitId, photoId)
	} else {
		r0 = ret.Get(0).(unit.InteriorCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint, uint) error); ok {
		r1 = rf(ctx, UnitId, photoId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUnitById provides a mock function with given fields: ctx, buildingId, facilityId
func (_m *Business) GetUnitById(ctx context.Context, buildingId uint, facilityId uint) (unit.Core, error) {
	ret := _m.Called(ctx, buildingId, facilityId)

	var r0 unit.Core
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint) unit.Core); ok {
		r0 = rf(ctx, buildingId, facilityId)
	} else {
		r0 = ret.Get(0).(unit.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint, uint) error); ok {
		r1 = rf(ctx, buildingId, facilityId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUnitByType provides a mock function with given fields: ctx, buildingId, unitType
func (_m *Business) GetUnitByType(ctx context.Context, buildingId uint, unitType string) (unit.Core, error) {
	ret := _m.Called(ctx, buildingId, unitType)

	var r0 unit.Core
	if rf, ok := ret.Get(0).(func(context.Context, uint, string) unit.Core); ok {
		r0 = rf(ctx, buildingId, unitType)
	} else {
		r0 = ret.Get(0).(unit.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint, string) error); ok {
		r1 = rf(ctx, buildingId, unitType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUnitFacility provides a mock function with given fields: ctx, unitId, facilityId
func (_m *Business) GetUnitFacility(ctx context.Context, unitId uint, facilityId uint) (unit.Facility, error) {
	ret := _m.Called(ctx, unitId, facilityId)

	var r0 unit.Facility
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint) unit.Facility); ok {
		r0 = rf(ctx, unitId, facilityId)
	} else {
		r0 = ret.Get(0).(unit.Facility)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint, uint) error); ok {
		r1 = rf(ctx, unitId, facilityId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateInteriorPhoto provides a mock function with given fields: ctx, photo
func (_m *Business) UpdateInteriorPhoto(ctx context.Context, photo unit.InteriorCore) (unit.InteriorCore, error) {
	ret := _m.Called(ctx, photo)

	var r0 unit.InteriorCore
	if rf, ok := ret.Get(0).(func(context.Context, unit.InteriorCore) unit.InteriorCore); ok {
		r0 = rf(ctx, photo)
	} else {
		r0 = ret.Get(0).(unit.InteriorCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, unit.InteriorCore) error); ok {
		r1 = rf(ctx, photo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUnit provides a mock function with given fields: ctx, _a1
func (_m *Business) UpdateUnit(ctx context.Context, _a1 unit.Core) (unit.Core, error) {
	ret := _m.Called(ctx, _a1)

	var r0 unit.Core
	if rf, ok := ret.Get(0).(func(context.Context, unit.Core) unit.Core); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(unit.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, unit.Core) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
