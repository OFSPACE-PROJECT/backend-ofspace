// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"
	complex "ofspace-be/features/complex"

	mock "github.com/stretchr/testify/mock"
)

// Data is an autogenerated mock type for the Data type
type Data struct {
	mock.Mock
}

// CreateComplex provides a mock function with given fields: ctx, _a1
func (_m *Data) CreateComplex(ctx context.Context, _a1 complex.Core) (complex.Core, error) {
	ret := _m.Called(ctx, _a1)

	var r0 complex.Core
	if rf, ok := ret.Get(0).(func(context.Context, complex.Core) complex.Core); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(complex.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, complex.Core) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllComplex provides a mock function with given fields: ctx
func (_m *Data) GetAllComplex(ctx context.Context) ([]complex.Core, error) {
	ret := _m.Called(ctx)

	var r0 []complex.Core
	if rf, ok := ret.Get(0).(func(context.Context) []complex.Core); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]complex.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetComplex provides a mock function with given fields: ctx, id
func (_m *Data) GetComplex(ctx context.Context, id uint) (complex.Core, error) {
	ret := _m.Called(ctx, id)

	var r0 complex.Core
	if rf, ok := ret.Get(0).(func(context.Context, uint) complex.Core); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(complex.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestComplex provides a mock function with given fields: ctx, id, name
func (_m *Data) RequestComplex(ctx context.Context, id uint, name string) (complex.Core, error) {
	ret := _m.Called(ctx, id, name)

	var r0 complex.Core
	if rf, ok := ret.Get(0).(func(context.Context, uint, string) complex.Core); ok {
		r0 = rf(ctx, id, name)
	} else {
		r0 = ret.Get(0).(complex.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint, string) error); ok {
		r1 = rf(ctx, id, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchComplex provides a mock function with given fields: ctx, name
func (_m *Data) SearchComplex(ctx context.Context, name string) ([]complex.Core, error) {
	ret := _m.Called(ctx, name)

	var r0 []complex.Core
	if rf, ok := ret.Get(0).(func(context.Context, string) []complex.Core); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]complex.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchComplexByAddress provides a mock function with given fields: ctx, address
func (_m *Data) SearchComplexByAddress(ctx context.Context, address string) ([]complex.Core, error) {
	ret := _m.Called(ctx, address)

	var r0 []complex.Core
	if rf, ok := ret.Get(0).(func(context.Context, string) []complex.Core); ok {
		r0 = rf(ctx, address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]complex.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateComplex provides a mock function with given fields: ctx, _a1
func (_m *Data) UpdateComplex(ctx context.Context, _a1 complex.Core) (complex.Core, error) {
	ret := _m.Called(ctx, _a1)

	var r0 complex.Core
	if rf, ok := ret.Get(0).(func(context.Context, complex.Core) complex.Core); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(complex.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, complex.Core) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
