// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"
	users "ofspace-be/features/users"

	mock "github.com/stretchr/testify/mock"
)

// Business is an autogenerated mock type for the Business type
type Business struct {
	mock.Mock
}

// DeleteUser provides a mock function with given fields: ctx, id
func (_m *Business) DeleteUser(ctx context.Context, id uint) (users.Core, error) {
	ret := _m.Called(ctx, id)

	var r0 users.Core
	if rf, ok := ret.Get(0).(func(context.Context, uint) users.Core); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(users.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllUser provides a mock function with given fields: ctx
func (_m *Business) GetAllUser(ctx context.Context) ([]users.Core, error) {
	ret := _m.Called(ctx)

	var r0 []users.Core
	if rf, ok := ret.Get(0).(func(context.Context) []users.Core); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]users.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByAdminStatus provides a mock function with given fields: ctx, status
func (_m *Business) GetUserByAdminStatus(ctx context.Context, status string) ([]users.Core, error) {
	ret := _m.Called(ctx, status)

	var r0 []users.Core
	if rf, ok := ret.Get(0).(func(context.Context, string) []users.Core); ok {
		r0 = rf(ctx, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]users.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: ctx, id
func (_m *Business) GetUserByID(ctx context.Context, id uint) (users.Core, error) {
	ret := _m.Called(ctx, id)

	var r0 users.Core
	if rf, ok := ret.Get(0).(func(context.Context, uint) users.Core); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(users.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginUser provides a mock function with given fields: ctx, data
func (_m *Business) LoginUser(ctx context.Context, data users.Core) (users.Core, error) {
	ret := _m.Called(ctx, data)

	var r0 users.Core
	if rf, ok := ret.Get(0).(func(context.Context, users.Core) users.Core); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Get(0).(users.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, users.Core) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterUser provides a mock function with given fields: ctx, data
func (_m *Business) RegisterUser(ctx context.Context, data users.Core) (users.Core, error) {
	ret := _m.Called(ctx, data)

	var r0 users.Core
	if rf, ok := ret.Get(0).(func(context.Context, users.Core) users.Core); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Get(0).(users.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, users.Core) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchUserByName provides a mock function with given fields: ctx, name
func (_m *Business) SearchUserByName(ctx context.Context, name string) ([]users.Core, error) {
	ret := _m.Called(ctx, name)

	var r0 []users.Core
	if rf, ok := ret.Get(0).(func(context.Context, string) []users.Core); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]users.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, data
func (_m *Business) UpdateUser(ctx context.Context, data users.Core) (users.Core, error) {
	ret := _m.Called(ctx, data)

	var r0 users.Core
	if rf, ok := ret.Get(0).(func(context.Context, users.Core) users.Core); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Get(0).(users.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, users.Core) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
