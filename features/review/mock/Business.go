// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"
	review "ofspace-be/features/review"

	mock "github.com/stretchr/testify/mock"
)

// Business is an autogenerated mock type for the Business type
type Business struct {
	mock.Mock
}

// CreateReview provides a mock function with given fields: ctx, _a1
func (_m *Business) CreateReview(ctx context.Context, _a1 review.Core) (review.Core, error) {
	ret := _m.Called(ctx, _a1)

	var r0 review.Core
	if rf, ok := ret.Get(0).(func(context.Context, review.Core) review.Core); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(review.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, review.Core) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllReview provides a mock function with given fields: ctx, unitType
func (_m *Business) GetAllReview(ctx context.Context, unitType uint) ([]review.Core, error) {
	ret := _m.Called(ctx, unitType)

	var r0 []review.Core
	if rf, ok := ret.Get(0).(func(context.Context, uint) []review.Core); ok {
		r0 = rf(ctx, unitType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]review.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, unitType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOneReview provides a mock function with given fields: ctx, id
func (_m *Business) GetOneReview(ctx context.Context, id uint) (review.Core, error) {
	ret := _m.Called(ctx, id)

	var r0 review.Core
	if rf, ok := ret.Get(0).(func(context.Context, uint) review.Core); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(review.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateReview provides a mock function with given fields: ctx, data
func (_m *Business) UpdateReview(ctx context.Context, data review.Core) (review.Core, error) {
	ret := _m.Called(ctx, data)

	var r0 review.Core
	if rf, ok := ret.Get(0).(func(context.Context, review.Core) review.Core); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Get(0).(review.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, review.Core) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
