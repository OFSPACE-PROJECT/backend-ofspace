// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"
	building "ofspace-be/features/building"

	mock "github.com/stretchr/testify/mock"
)

// Data is an autogenerated mock type for the Data type
type Data struct {
	mock.Mock
}

// AddFacilityToBuilding provides a mock function with given fields: c, facilityId, buildingId
func (_m *Data) AddFacilityToBuilding(c context.Context, facilityId uint, buildingId uint) (building.Facility, error) {
	ret := _m.Called(c, facilityId, buildingId)

	var r0 building.Facility
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint) building.Facility); ok {
		r0 = rf(c, facilityId, buildingId)
	} else {
		r0 = ret.Get(0).(building.Facility)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint, uint) error); ok {
		r1 = rf(c, facilityId, buildingId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBuilding provides a mock function with given fields: ctx, _a1
func (_m *Data) CreateBuilding(ctx context.Context, _a1 building.Core) (building.Core, error) {
	ret := _m.Called(ctx, _a1)

	var r0 building.Core
	if rf, ok := ret.Get(0).(func(context.Context, building.Core) building.Core); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(building.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, building.Core) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateExteriorPhoto provides a mock function with given fields: ctx, photo
func (_m *Data) CreateExteriorPhoto(ctx context.Context, photo building.ExteriorCore) (building.ExteriorCore, error) {
	ret := _m.Called(ctx, photo)

	var r0 building.ExteriorCore
	if rf, ok := ret.Get(0).(func(context.Context, building.ExteriorCore) building.ExteriorCore); ok {
		r0 = rf(ctx, photo)
	} else {
		r0 = ret.Get(0).(building.ExteriorCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, building.ExteriorCore) error); ok {
		r1 = rf(ctx, photo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFloorPhoto provides a mock function with given fields: ctx, photo
func (_m *Data) CreateFloorPhoto(ctx context.Context, photo building.FloorCore) (building.FloorCore, error) {
	ret := _m.Called(ctx, photo)

	var r0 building.FloorCore
	if rf, ok := ret.Get(0).(func(context.Context, building.FloorCore) building.FloorCore); ok {
		r0 = rf(ctx, photo)
	} else {
		r0 = ret.Get(0).(building.FloorCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, building.FloorCore) error); ok {
		r1 = rf(ctx, photo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteExteriorPhoto provides a mock function with given fields: ctx, BuildingId, photoId
func (_m *Data) DeleteExteriorPhoto(ctx context.Context, BuildingId uint, photoId uint) (building.ExteriorCore, error) {
	ret := _m.Called(ctx, BuildingId, photoId)

	var r0 building.ExteriorCore
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint) building.ExteriorCore); ok {
		r0 = rf(ctx, BuildingId, photoId)
	} else {
		r0 = ret.Get(0).(building.ExteriorCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint, uint) error); ok {
		r1 = rf(ctx, BuildingId, photoId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFacility provides a mock function with given fields: c, buildingId, facilityId
func (_m *Data) DeleteFacility(c context.Context, buildingId uint, facilityId uint) (building.Core, error) {
	ret := _m.Called(c, buildingId, facilityId)

	var r0 building.Core
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint) building.Core); ok {
		r0 = rf(c, buildingId, facilityId)
	} else {
		r0 = ret.Get(0).(building.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint, uint) error); ok {
		r1 = rf(c, buildingId, facilityId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFloorPhoto provides a mock function with given fields: ctx, BuildingId, photoId
func (_m *Data) DeleteFloorPhoto(ctx context.Context, BuildingId uint, photoId uint) (building.FloorCore, error) {
	ret := _m.Called(ctx, BuildingId, photoId)

	var r0 building.FloorCore
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint) building.FloorCore); ok {
		r0 = rf(ctx, BuildingId, photoId)
	} else {
		r0 = ret.Get(0).(building.FloorCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint, uint) error); ok {
		r1 = rf(ctx, BuildingId, photoId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllBuilding provides a mock function with given fields: ctx, complexId
func (_m *Data) GetAllBuilding(ctx context.Context, complexId uint) ([]building.Core, error) {
	ret := _m.Called(ctx, complexId)

	var r0 []building.Core
	if rf, ok := ret.Get(0).(func(context.Context, uint) []building.Core); ok {
		r0 = rf(ctx, complexId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]building.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, complexId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllBuildingFacility provides a mock function with given fields: c, buildingId
func (_m *Data) GetAllBuildingFacility(c context.Context, buildingId uint) (building.Core, error) {
	ret := _m.Called(c, buildingId)

	var r0 building.Core
	if rf, ok := ret.Get(0).(func(context.Context, uint) building.Core); ok {
		r0 = rf(c, buildingId)
	} else {
		r0 = ret.Get(0).(building.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(c, buildingId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllExteriorPhoto provides a mock function with given fields: ctx, BuildingId
func (_m *Data) GetAllExteriorPhoto(ctx context.Context, BuildingId uint) ([]building.ExteriorCore, error) {
	ret := _m.Called(ctx, BuildingId)

	var r0 []building.ExteriorCore
	if rf, ok := ret.Get(0).(func(context.Context, uint) []building.ExteriorCore); ok {
		r0 = rf(ctx, BuildingId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]building.ExteriorCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, BuildingId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllFloorPhoto provides a mock function with given fields: ctx, BuildingId
func (_m *Data) GetAllFloorPhoto(ctx context.Context, BuildingId uint) ([]building.FloorCore, error) {
	ret := _m.Called(ctx, BuildingId)

	var r0 []building.FloorCore
	if rf, ok := ret.Get(0).(func(context.Context, uint) []building.FloorCore); ok {
		r0 = rf(ctx, BuildingId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]building.FloorCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, BuildingId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllVerifiedBuilding provides a mock function with given fields: ctx, complexId, buildingStatus
func (_m *Data) GetAllVerifiedBuilding(ctx context.Context, complexId uint, buildingStatus string) ([]building.Core, error) {
	ret := _m.Called(ctx, complexId, buildingStatus)

	var r0 []building.Core
	if rf, ok := ret.Get(0).(func(context.Context, uint, string) []building.Core); ok {
		r0 = rf(ctx, complexId, buildingStatus)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]building.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint, string) error); ok {
		r1 = rf(ctx, complexId, buildingStatus)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBuildingById provides a mock function with given fields: ctx, id
func (_m *Data) GetBuildingById(ctx context.Context, id uint) (building.Core, error) {
	ret := _m.Called(ctx, id)

	var r0 building.Core
	if rf, ok := ret.Get(0).(func(context.Context, uint) building.Core); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(building.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBuildingFacility provides a mock function with given fields: c, buildingId, facilityId
func (_m *Data) GetBuildingFacility(c context.Context, buildingId uint, facilityId uint) (building.Facility, error) {
	ret := _m.Called(c, buildingId, facilityId)

	var r0 building.Facility
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint) building.Facility); ok {
		r0 = rf(c, buildingId, facilityId)
	} else {
		r0 = ret.Get(0).(building.Facility)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint, uint) error); ok {
		r1 = rf(c, buildingId, facilityId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExteriorPhoto provides a mock function with given fields: ctx, buildingId, photoId
func (_m *Data) GetExteriorPhoto(ctx context.Context, buildingId uint, photoId uint) (building.ExteriorCore, error) {
	ret := _m.Called(ctx, buildingId, photoId)

	var r0 building.ExteriorCore
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint) building.ExteriorCore); ok {
		r0 = rf(ctx, buildingId, photoId)
	} else {
		r0 = ret.Get(0).(building.ExteriorCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint, uint) error); ok {
		r1 = rf(ctx, buildingId, photoId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFloorPhoto provides a mock function with given fields: ctx, BuildingId, photoId
func (_m *Data) GetFloorPhoto(ctx context.Context, BuildingId uint, photoId uint) (building.FloorCore, error) {
	ret := _m.Called(ctx, BuildingId, photoId)

	var r0 building.FloorCore
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint) building.FloorCore); ok {
		r0 = rf(ctx, BuildingId, photoId)
	} else {
		r0 = ret.Get(0).(building.FloorCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint, uint) error); ok {
		r1 = rf(ctx, BuildingId, photoId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchBuildingByName provides a mock function with given fields: ctx, name, status
func (_m *Data) SearchBuildingByName(ctx context.Context, name string, status string) ([]building.Core, error) {
	ret := _m.Called(ctx, name, status)

	var r0 []building.Core
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []building.Core); ok {
		r0 = rf(ctx, name, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]building.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, name, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBuilding provides a mock function with given fields: ctx, _a1
func (_m *Data) UpdateBuilding(ctx context.Context, _a1 building.Core) (building.Core, error) {
	ret := _m.Called(ctx, _a1)

	var r0 building.Core
	if rf, ok := ret.Get(0).(func(context.Context, building.Core) building.Core); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(building.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, building.Core) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateExteriorPhoto provides a mock function with given fields: ctx, photo
func (_m *Data) UpdateExteriorPhoto(ctx context.Context, photo building.ExteriorCore) (building.ExteriorCore, error) {
	ret := _m.Called(ctx, photo)

	var r0 building.ExteriorCore
	if rf, ok := ret.Get(0).(func(context.Context, building.ExteriorCore) building.ExteriorCore); ok {
		r0 = rf(ctx, photo)
	} else {
		r0 = ret.Get(0).(building.ExteriorCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, building.ExteriorCore) error); ok {
		r1 = rf(ctx, photo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFloorPhoto provides a mock function with given fields: ctx, photo
func (_m *Data) UpdateFloorPhoto(ctx context.Context, photo building.FloorCore) (building.FloorCore, error) {
	ret := _m.Called(ctx, photo)

	var r0 building.FloorCore
	if rf, ok := ret.Get(0).(func(context.Context, building.FloorCore) building.FloorCore); ok {
		r0 = rf(ctx, photo)
	} else {
		r0 = ret.Get(0).(building.FloorCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, building.FloorCore) error); ok {
		r1 = rf(ctx, photo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
